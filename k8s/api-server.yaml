---
kind: ConfigMap
apiVersion: v1
metadata:
  name: vuekot-api-server-config
data:
  CORS_ALLOWED_HOST: frontend:8080
  EXIT_ON_PRESSING_ENTER: "false"
  CLUSTER_TYPE: k8s
  POSTGRES_HOST: postgres
  POSTGRES_PORT: "5432"
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: vuekot-api-server-app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vuekot-api-server-app
        tier: backend
    spec:
      containers:
      - name: vuekot-api-server
        image: gcr.io/vuekot/vuekot-api-server:v3
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        envFrom:
            - configMapRef:
                name: vuekot-api-server-config
        env:
        - name: GET_HOSTS_FROM
          value: dns
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: vuekot-api-server-app
  labels:
    app: vuekot-api-server-app
    tier: backend
spec:
  selector:
    app: vuekot-api-server-app
    tier: backend
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # NOTE: with Minikube, we cannot use a loadbalancer, use NodePort instead. When deployed in a cloud environment, we do not need to use NodePort field.
  # Use the IP address of minikube with the node port. Ip of minikube can be found by running 'minikube ip'
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP